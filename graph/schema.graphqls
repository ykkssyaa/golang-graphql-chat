
scalar Time

type User {
  id: ID!
  name: String!
  chats: [Chat!]
}

type Message {
  id: ID!
  payload: String!
  sender: User!
  receiver: User!
  chat: Chat!
  time: Time
}

type Chat {
  id: ID!
  user_1: User!
  user_2: User!
}

input MessagesFromUserInput{
  receiver:ID!
  sender:ID!
}

type MessageEdge {
  node: Message
  cursor: ID!
}

type MessageConnection {
  edges: [MessageEdge]
  pageInfo: PageInfo!
  totalCount: Int
}

type PageInfo {
  startCursor: ID!
  endCursor: ID!
  hasNextPage: Boolean!
}

type Query {
  users: [User!]
  chats: [Chat!]
  messagesFromUser(input:MessagesFromUserInput!, first: Int, after:ID):MessageConnection!
}

input NewUser{
  name: String!
}

input NewMessage{
  payload: String!
  sender: ID!
  receiver: ID!
  chat: ID!
  time: Time
}

type Mutation {
  createUser(input:NewUser): User!
  postMessage(input:NewMessage): Message!

  deleteChat(id:ID!):Boolean
  deleteMessage(id:ID!):Boolean
}

type Subscription {
  messagePosted(message: ID!):Message!
  userJoined(user: ID!):User!
}

